1. 
npm i typescript -D //dev dependency
npm i express
npx tsc --init   //create a new tsconfig.json

2. 
tsconfig.json
"rootDir": "./src", 
"outDir": "./build",

3.
npm i --save-dev @types/express
npm add tsc-watch -D  //to compile the source code


4.
"scripts": {
    "build" : "tsc-watch"  //watch local TS config --> src directory
},


try--> npm run build
       node build/index.js

5.
"scripts": {
    "start" : "node build/index.js",
    "build" : "tsc-watch --onSuccess \"npm start\""
},

npm run build

6. Apollo GraphQL express
API Reference: express Middleware

The expressMiddleware function enables you to attach Apollo Server to an Express server.
The expressMiddleware function accepts two arguments:
    The first required argument is an instance of ApolloServer that has been started by calling its start method
    Second optional argument is an object for configuring ApolloServer

the GraphQL server handles and works with JSON data hence we need body-parser Middleware

6. Error: Query root type must be provided.  due to empty typeDefs and resolvers

7. Containers for Postgresql and Redis - docker-compose.yml

8. Prisma set-up
npm install prisma ts-node @types/node --save-dev
npx prisma init

DATABASE_URL="postgresql://username:password@localhost:5432/DB_NAME?schema=public"

Terminal:
    docker ps 
        docker exec -it container-id bash
        su postgres(DB_User)  
            psql
                \l 
                \c DB_Name
                \d

or if not working then click on the container ---> go to EXEC ---> su postgres(DB_User)  

npx prisma migrate dev --name create_users_table

for every change in schema run the migration cmd (--name change....)


9.
npm i jsonwebtoken
npm i @types/jsonwebtoken -d